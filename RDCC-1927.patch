Index: src/main/java/uk/gov/hmcts/reform/cwrdapi/service/JsrValidatorInitializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/uk/gov/hmcts/reform/cwrdapi/service/JsrValidatorInitializer.java	(date 1605098785527)
+++ src/main/java/uk/gov/hmcts/reform/cwrdapi/service/JsrValidatorInitializer.java	(date 1605098785527)
@@ -0,0 +1,58 @@
+package uk.gov.hmcts.reform.cwrdapi.service;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.annotation.PostConstruct;
+import javax.validation.ConstraintViolation;
+import javax.validation.Validation;
+import javax.validation.Validator;
+import javax.validation.ValidatorFactory;
+
+@Component
+@Slf4j
+public class JsrValidatorInitializer<T> {
+
+    private Validator validator;
+
+    private Set<ConstraintViolation<T>> constraintViolations;
+
+    @Value("${logging-component-name}")
+    private String logComponentName;
+
+    @PostConstruct
+    public void initializeFactory() {
+        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
+        validator = factory.getValidator();
+    }
+
+    /**
+     * JSR validation.
+     *
+     * @param domains List
+     * @return List binder list
+     */
+    public List<T> getInvalidJsrRecords(List<T> domains) {
+
+        log.info("{}:: JsrValidatorInitializer data processing validate starts::", logComponentName);
+        this.constraintViolations = new LinkedHashSet<>();
+        List<T> invalidList = new ArrayList<>();
+        domains.forEach(domain -> {
+            Set<ConstraintViolation<T>> constraintViolations = validator.validate(domain);
+            if (constraintViolations.size() > 0) {
+                invalidList.add(domain);
+            }
+            this.constraintViolations.addAll(constraintViolations);
+        });
+
+        log.info("{}:: JsrValidatorInitializer data processing validate complete::", logComponentName);
+        return invalidList;
+    }
+}
+
Index: src/test/java/uk/gov/hmcts/reform/cwrdapi/controllers/WelcomeControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/uk/gov/hmcts/reform/cwrdapi/controllers/WelcomeControllerTest.java	(revision 5b2feb73e19017ab8fafd7377dbfdc82c149bc26)
+++ src/test/java/uk/gov/hmcts/reform/cwrdapi/controllers/WelcomeControllerTest.java	(date 1605096677673)
@@ -14,7 +14,7 @@
     private final WelcomeController welcomeController = new WelcomeController();
 
     @Test
-    public void test_should_return_welcome_response() {
+    public void test_should_return_welcome_response() throws Exception {
 
         ResponseEntity<String> responseEntity = welcomeController.welcome();
         String expectedMessage = "Message for the Caseworker Ref Data API";
Index: src/main/java/uk/gov/hmcts/reform/cwrdapi/config/SecurityConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/uk/gov/hmcts/reform/cwrdapi/config/SecurityConfiguration.java	(revision 5b2feb73e19017ab8fafd7377dbfdc82c149bc26)
+++ src/main/java/uk/gov/hmcts/reform/cwrdapi/config/SecurityConfiguration.java	(date 1605097912311)
@@ -30,7 +30,7 @@
 
 @Configuration
 @ConfigurationProperties(prefix = "security")
-@EnableWebSecurity
+//@EnableWebSecurity
 @Slf4j
 @SuppressWarnings("unchecked")
 public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
@@ -74,23 +74,23 @@
 
     @Override
     protected void configure(final HttpSecurity http) throws Exception {
-        http
-           .addFilterBefore(serviceAuthFilter, BearerTokenAuthenticationFilter.class)
-           .sessionManagement().sessionCreationPolicy(STATELESS).and()
-           .csrf().disable()
-           .formLogin().disable()
-           .logout().disable()
-           .authorizeRequests()
-           .antMatchers("/error").permitAll()
-           .anyRequest()
-           .authenticated()
-           .and()
-           .oauth2ResourceServer()
-           .jwt()
-           .jwtAuthenticationConverter(jwtAuthenticationConverter)
-           .and()
-           .and()
-            .oauth2Client();
+//        http
+//           .addFilterBefore(serviceAuthFilter, BearerTokenAuthenticationFilter.class)
+//           .sessionManagement().sessionCreationPolicy(STATELESS).and()
+//           .csrf().disable()
+//           .formLogin().disable()
+//           .logout().disable()
+//           .authorizeRequests()
+//           .antMatchers("/error").permitAll()
+//           .anyRequest()
+//           .authenticated()
+//           .and()
+//           .oauth2ResourceServer()
+//           .jwt()
+//           .jwtAuthenticationConverter(jwtAuthenticationConverter)
+//           .and()
+//           .and()
+//            .oauth2Client();
     }
 
     @Bean
Index: src/main/java/uk/gov/hmcts/reform/cwrdapi/service/ValidationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/uk/gov/hmcts/reform/cwrdapi/service/ValidationService.java	(date 1605114008265)
+++ src/main/java/uk/gov/hmcts/reform/cwrdapi/service/ValidationService.java	(date 1605114008265)
@@ -0,0 +1,19 @@
+package uk.gov.hmcts.reform.cwrdapi.service;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+import uk.gov.hmcts.reform.cwrdapi.client.domain.ICasWorkerDomain;
+
+import java.util.List;
+
+@Component
+public class ValidationService {
+
+    @Autowired
+    JsrValidatorInitializer<ICasWorkerDomain> jsrValidatorInitializer;
+
+    public void validate(List<ICasWorkerDomain> caseWorkerProfileList) throws Exception {
+        //Gets Invalid records
+        List<ICasWorkerDomain> invalidRecords = jsrValidatorInitializer.getInvalidJsrRecords(caseWorkerProfileList);
+    }
+}
Index: src/main/java/uk/gov/hmcts/reform/cwrdapi/controllers/WelcomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/uk/gov/hmcts/reform/cwrdapi/controllers/WelcomeController.java	(revision 5b2feb73e19017ab8fafd7377dbfdc82c149bc26)
+++ src/main/java/uk/gov/hmcts/reform/cwrdapi/controllers/WelcomeController.java	(date 1605096585208)
@@ -4,6 +4,7 @@
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.CacheControl;
 import org.springframework.http.ResponseEntity;
@@ -11,6 +12,12 @@
 import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.bind.annotation.RestController;
 
+import uk.gov.hmcts.reform.cwrdapi.client.domain.CaseWorkerProfile;
+import uk.gov.hmcts.reform.cwrdapi.client.domain.ICasWorkerDomain;
+import uk.gov.hmcts.reform.cwrdapi.service.ValidationService;
+
+import java.util.ArrayList;
+import java.util.List;
 import java.util.UUID;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
@@ -29,6 +36,9 @@
     private static final String INSTANCE_ID = UUID.randomUUID().toString();
     private static final String MESSAGE = "Message for the Caseworker Ref Data API";
 
+    @Autowired
+    ValidationService validationService;
+
 
     /**
      * Root GET endpoint.
@@ -49,14 +59,18 @@
         )
     })
     @GetMapping(
-        path = "/",
+        path = "/test",
         produces = APPLICATION_JSON_VALUE
     )
     @ResponseBody
-    public ResponseEntity<String> welcome() {
+    public ResponseEntity<String> welcome() throws Exception {
 
         log.info("{}:: Welcome '{}' from running instance: {}", loggingComponentName, MESSAGE, INSTANCE_ID);
 
+        CaseWorkerProfile profile = CaseWorkerProfile.builder().build();
+        List<ICasWorkerDomain> caseWorkerProfileList = new ArrayList<>();
+        caseWorkerProfileList.add(profile);
+        validationService.validate(caseWorkerProfileList);
         return ResponseEntity
             .ok()
             .cacheControl(CacheControl.noCache())
Index: src/integrationTest/resources/db/migration/V1_1__init_tables.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/integrationTest/resources/db/migration/V1_1__init_tables.sql	(date 1605006955851)
+++ src/integrationTest/resources/db/migration/V1_1__init_tables.sql	(date 1605006955851)
@@ -0,0 +1,120 @@
+
+create schema if not exists dbrdcaseworker;
+
+create table case_worker_profile(
+	case_worker_id varchar(64),
+	first_name varchar(128),
+	last_name varchar(128),
+	email_id varchar(512) not null,
+	user_type_id int,
+	region varchar(64),
+	region_id integer not null,
+	delete_flag boolean,
+	delete_date timestamp,
+	created_date timestamp,
+	last_update timestamp,
+	constraint case_worker_profile_pk primary key (case_worker_id),
+	constraint email_id_unique unique (email_id)
+);
+
+create table case_worker_location(
+	case_worker_location_id serial,
+	case_worker_id varchar(64) not null,
+	location varchar(128),
+    location_id int not null,
+    primary_flag boolean,
+	created_date timestamp,
+	last_update timestamp,
+	constraint case_worker_location_pk primary key (case_worker_location_id),
+	constraint case_worker_locn_id_uq unique (case_worker_id,location_id)
+);
+
+
+
+create table case_worker_work_area(
+	case_worker_work_area_id serial,
+	case_worker_id varchar(64) not null,
+	area_of_work varchar(128) not null,
+    service_code varchar(16) not null,
+	created_date timestamp,
+	last_update timestamp,
+	constraint case_worker_work_area_pk primary key (case_worker_work_area_id),
+	constraint case_worker_work_area_uq unique (case_worker_id,service_code)
+);
+
+create table case_worker_role(
+	case_worker_role_id serial,
+	case_worker_id varchar(64) not null,
+	role_id int not null,
+	primary_flag boolean,
+	created_date timestamp,
+	last_update timestamp,
+	constraint case_worker_role_pk primary key (case_worker_role_id),
+	constraint case_worker_role_id_uq unique (case_worker_id,role_id)
+);
+
+create table role_type(
+	role_id int,
+	description varchar(512),
+	created_date timestamp,
+	last_update timestamp,
+	constraint role_id_pk primary key (role_id)
+);
+
+create table user_type(
+	user_type_id int,
+	description varchar(512),
+	created_date timestamp,
+	last_update timestamp,
+	constraint user_type_id_pk primary key (user_type_id)
+);
+
+create table case_worker_idam_role_assoc(
+    cw_idam_role_assoc_id serial,
+    role_id int not null,
+	service_code varchar(16) not null,
+	idam_role varchar(64) not null,
+	created_date timestamp,
+	last_update timestamp,
+	constraint cw_idam_role_assoc_id_pk primary key (cw_idam_role_assoc_id)
+);
+
+create table case_worker_audit (
+    job_id serial,
+    authenticated_user_id varchar(32),
+    job_start_time timestamp not null,
+    file_name varchar(64) not null,
+    job_end_time timestamp,
+    status varchar(32),
+    comments varchar(512),
+    constraint case_Worker_audit_pk primary key (job_id)
+);
+
+create table case_worker_exception (
+   id serial,
+   job_id bigint not null,
+   excel_row_id varchar(32),
+   email_id varchar(32),
+   field_in_error varchar(256),
+   error_description varchar(512),
+   updated_timestamp timestamp,
+   constraint case_worker_exception_pk primary key (id)
+);
+
+alter table case_worker_location add constraint case_worker_id_fk1 foreign key (case_worker_id)
+references case_worker_profile (case_worker_id);
+
+alter table case_worker_work_area add constraint case_worker_id_fk2 foreign key (case_worker_id)
+references case_worker_profile (case_worker_id);
+
+alter table case_worker_role add constraint case_worker_id_fk3 foreign key (case_worker_id)
+references case_worker_profile (case_worker_id);
+
+alter table case_worker_role add constraint role_id_fk1 foreign key (role_id)
+references role_type (role_id);
+
+alter table case_worker_idam_role_assoc add constraint role_id_fk2 foreign key (role_id)
+references role_type (role_id);
+
+alter table case_worker_exception add constraint job_id_fk1 foreign key (job_id)
+references case_worker_audit (job_id);
\ No newline at end of file
Index: src/main/java/uk/gov/hmcts/reform/cwrdapi/service/AuditService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/uk/gov/hmcts/reform/cwrdapi/service/AuditService.java	(date 1605106270740)
+++ src/main/java/uk/gov/hmcts/reform/cwrdapi/service/AuditService.java	(date 1605106270740)
@@ -0,0 +1,45 @@
+package uk.gov.hmcts.reform.cwrdapi.service;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.PlatformTransactionManager;
+import org.springframework.transaction.TransactionStatus;
+import org.springframework.transaction.support.DefaultTransactionDefinition;
+
+@Component
+public class AuditService {
+
+    @Autowired
+    JdbcTemplate jdbcTemplate;
+
+    @Autowired
+    protected PlatformTransactionManager platformTransactionManager;
+
+    /**
+     * Capture and log scheduler details with file status.
+     *
+     */
+    public void auditSchedulerStatus() {
+        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
+        def.setName("Auditing scheduler details");
+        jdbcTemplate.update("schedulerInsertSql","");
+        TransactionStatus status = platformTransactionManager.getTransaction(def);
+        platformTransactionManager.commit(status);
+    }
+
+
+    /**
+     * Capture & log scheduler exceptions.
+     *
+     */
+    public void auditException(String exceptionMessage) {
+        //separate transaction manager required for auditing as it is independent form route
+        //Transaction
+        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
+        jdbcTemplate.update("invalidExceptionSql", "params");
+        def.setName("Auditing scheduler details");
+        TransactionStatus status = platformTransactionManager.getTransaction(def);
+        platformTransactionManager.commit(status);
+    }
+}
Index: src/integrationTest/resources/db/migration/V1_3__insert_queries_role_user_type.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/integrationTest/resources/db/migration/V1_3__insert_queries_role_user_type.sql	(date 1605006955852)
+++ src/integrationTest/resources/db/migration/V1_3__insert_queries_role_user_type.sql	(date 1605006955852)
@@ -0,0 +1,7 @@
+-- insert queries for role_type table
+INSERT INTO role_type (role_id, description, created_date) VALUES (1, 'SENIOR_TRIBUNAL_CASEWORKER',timezone('utc', now()));
+INSERT INTO role_type (role_id, description, created_date) VALUES (2, 'TRIBUNAL_CASEWORKER',timezone('utc', now()));
+-- insert queries for user_type table
+INSERT INTO user_type (user_type_id, description, created_date) VALUES (1, 'CTSC',timezone('utc', now()));
+INSERT INTO user_type (user_type_id, description, created_date) VALUES (2, 'CTRT', timezone('utc', now()));
+INSERT INTO user_type (user_type_id, description, created_date) VALUES (3, 'Legal office', timezone('utc', now()));
\ No newline at end of file
Index: src/integrationTest/resources/db/migration/V1_2__add_sequences.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/integrationTest/resources/db/migration/V1_2__add_sequences.sql	(date 1605006955852)
+++ src/integrationTest/resources/db/migration/V1_2__add_sequences.sql	(date 1605006955852)
@@ -0,0 +1,25 @@
+
+create sequence CASE_WORKER_LOCATION_ID_SEQ;
+create sequence CASE_WORKER_WORK_AREA_ID_SEQ;
+create sequence CASE_WORKER_ROLE_ID_SEQ;
+create sequence CW_IDAM_ROLE_ASSOC_ID_SEQ;
+create sequence JOB_ID_SEQ;
+create sequence EXCEPTION_ID_SEQ;
+
+ALTER TABLE case_worker_location ALTER COLUMN case_worker_location_id
+SET DEFAULT nextval('CASE_WORKER_LOCATION_ID_SEQ');
+
+ALTER TABLE case_worker_work_area ALTER COLUMN case_worker_work_area_id
+SET DEFAULT nextval('CASE_WORKER_WORK_AREA_ID_SEQ');
+
+ALTER TABLE case_worker_role ALTER COLUMN case_worker_role_id
+SET DEFAULT nextval('CASE_WORKER_ROLE_ID_SEQ');
+
+ALTER TABLE case_worker_idam_role_assoc ALTER COLUMN cw_idam_role_assoc_id
+SET DEFAULT nextval('CW_IDAM_ROLE_ASSOC_ID_SEQ');
+
+ALTER TABLE case_worker_audit ALTER COLUMN job_id
+SET DEFAULT nextval('JOB_ID_SEQ');
+
+ALTER TABLE case_worker_exception ALTER COLUMN id
+SET DEFAULT nextval('EXCEPTION_ID_SEQ');
Index: src/integrationTest/resources/application-test.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/integrationTest/resources/application-test.yml	(date 1604315502235)
+++ src/integrationTest/resources/application-test.yml	(date 1604315502235)
@@ -0,0 +1,62 @@
+spring:
+  flyway:
+    locations: classpath:db/migration,db/migrationAks
+  datasource:
+    driverClassName: org.h2.Driver
+    url: jdbc:h2:mem:locrefdata
+    platform: h2
+    username: ${POSTGRES_USERNAME:dbrdlocationref}
+    password: ${POSTGRES_PASSWORD:dbrdlocationref}
+  jpa:
+    show-sql: true
+    database-platform: org.hibernate.dialect.H2Dialect
+    hibernate:
+      ddl-auto: validate
+    properties:
+      hibernate:
+        enable_lazy_load_no_trans: true
+  main:
+    allow-bean-definition-overriding: true
+  security:
+    oauth2:
+      client:
+        provider:
+          oidc:
+            issuer-uri: ${OPEN_ID_API_BASE_URI:http://0.0.0.0:6000/o}
+        registration:
+          oidc:
+            client-id: microservicekey-rd-location-ref-api
+            client-secret: ${S2S_SECRET:AAAAAAAAAAAAAAAA}
+security:
+  anonymousPaths:
+    - "/"
+    - "/csrf"
+    - "/health"
+    - "/health/liveness"
+    - "/loggers/**"
+    - "/swagger-ui.html"
+    - "/swagger-resources/**"
+    - "/v2/api-docs"
+    - "/webjars/springfox-swagger-ui/**"
+    - "/favicon.ico"
+    - "/error"
+idam:
+  s2s-auth:
+    totp_secret: ${S2S_SECRET:AAAAAAAAAAAAAAAA}
+    microservice: rd_location_ref_api
+    url: ${S2S_URL:http://127.0.0.1:8990}
+  client:
+      redirect_uri: https://rd-location-ref-api-aat.service.core-compute-aat.internal/oauth2redirect
+      id: rd-location-ref-api
+
+  s2s-authorised:
+    services: ${LRD_S2S_AUTHORISED_SERVICES:rd_location_ref_api}
+  api:
+    url: ${IDAM_URL:http://127.0.0.1:5000}
+
+auth.idam.client.baseUrl: ${http://127.0.0.1:5000/o}
+oidc:
+  issuer: ${OIDC_ISSUER:http://127.0.0.1:5000/openam/oauth2/hmcts}
+  expiration: 14400000 # milliseconds 4 hours
+
+loggingComponentName: Rd_location_ref_api
